name: C++ CI with CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # 允许手动触发工作流
  workflow_dispatch:

# 授予工作流创建Release所需的权限
permissions:
  contents: write

jobs:
  build:
    # 使用输出参数将构建信息传递给后续作业
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit_sha: ${{ github.sha }}
    # 在多个操作系统上运行
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # 多个编译器版本
        compiler: [g++, clang++, cl]
        include:
          - os: ubuntu-latest
            compiler: g++
          - os: ubuntu-latest
            compiler: clang++
          - os: windows-latest
            compiler: cl
          - os: macos-latest
            compiler: clang++
      # 如果一个矩阵构建失败，其他构建继续
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    # 设置版本号（从0.0.1开始）
    - name: Set Version
      id: version
      # 使用bash shell确保兼容性
      shell: bash
      run: |
        # 使用简单直接的方法设置版本号，避免复杂命令导致的失败
        # 默认使用初始版本0.0.1
        VERSION="0.0.1"
        
        # 尝试获取现有标签，但不依赖此操作的成功
        # 使用管道和条件语句确保即使命令失败也能继续执行
        GIT_TAGS=$(git ls-remote --tags origin 2>/dev/null || echo "")
        
        # 如果获取到标签，尝试解析最新版本
        if [ -n "$GIT_TAGS" ]; then
          # 过滤出符合语义化版本格式的标签
          SEMVER_TAGS=$(echo "$GIT_TAGS" | grep -o 'refs/tags/v[0-9]\+\.[0-9]\+\.[0-9]\+' 2>/dev/null || echo "")
          
          if [ -n "$SEMVER_TAGS" ]; then
            # 尝试获取最新标签并递增版本号
            # 使用简单的排序方法，避免复杂参数导致的问题
            LATEST_TAG=$(echo "$SEMVER_TAGS" | sed 's/refs\/tags\///' | sort --version-sort | tail -n 1 | sed 's/v//')
            
            # 确保成功提取到版本号后再尝试递增
            if [ -n "$LATEST_TAG" ]; then
              # 使用简单的方法分割版本号
              MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1)
              MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
              PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
              
              # 确保版本号部分都是数字后再递增
              if [[ "$MAJOR" =~ ^[0-9]+$ && "$MINOR" =~ ^[0-9]+$ && "$PATCH" =~ ^[0-9]+$ ]]; then
                NEW_PATCH=$((PATCH + 1))
                VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
                echo "Found existing tags, using next version: v$VERSION"
              fi
            fi
          fi
        fi
        
        # 无论前面的命令是否成功，始终输出版本号
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        echo "Final version being used: v$VERSION"

    # 在 Linux 上设置编译器
    - name: Set compiler (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "g++" ]; then
          sudo apt-get install -y g++
          echo "CXX=g++" >> $GITHUB_ENV
        else
          sudo apt-get install -y clang
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    # 在 macOS 上设置编译器
    - name: Set compiler (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
        echo "CXX=clang++" >> $GITHUB_ENV
        echo "PATH=/usr/local/opt/llvm/bin:$PATH" >> $GITHUB_ENV

    # 创建构建目录
    - name: Create Build Directory
      run: mkdir -p build

    # 在 Linux/macOS 上运行 CMake 配置
    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: ./build
      run: cmake .. -DCMAKE_BUILD_TYPE=Release

    # 在 Windows 上运行 CMake 配置
    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./build
      run: cmake .. -DCMAKE_BUILD_TYPE=Release

    # 构建项目
    - name: Build
      working-directory: ./build
      run: cmake --build . --config Release

    # 如果有测试，可以添加测试步骤
    # - name: Test
    #   working-directory: ./build
    #   run: ctest -C Release

    # 上传构建产物
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: dp_study-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/dp_study*
          build/dp_study.exe
        # 保留1天的构建产物
        retention-days: 1

  # 创建和发布GitHub Release
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    # 显示下载的文件结构用于调试
    - name: List downloaded files
      run: ls -laR artifacts
    
    # 重命名文件，使其包含版本信息
    - name: Rename artifacts
      run: |
        mkdir -p release_assets
        VERSION=${{ needs.build.outputs.version }}
        
        # 遍历所有下载的产物
        for dir in artifacts/*; do
          PLATFORM=${dir#artifacts/}
          if [ -d "$dir" ]; then
            cd "$dir"
            # 查找可执行文件
            for file in dp_study*; do
              if [ -f "$file" ]; then
                # 处理Windows可执行文件
                if [[ "$file" == *.exe ]]; then
                  NEW_NAME="dp_study_${PLATFORM}_v${VERSION}.exe"
                else
                  # 处理Linux/macOS可执行文件
                  NEW_NAME="dp_study_${PLATFORM}_v${VERSION}"
                fi
                echo "Renaming $file to $NEW_NAME"
                mv "$file" ../../release_assets/$NEW_NAME
              fi
            done
            cd ../..
          fi
        done
    
    # 创建GitHub Release
    - name: Create GitHub Release
      id: create_release
      uses: actions/github-script@v7
      env:
        VERSION: ${{ needs.build.outputs.version }}
        COMMIT_SHA: ${{ needs.build.outputs.commit_sha }}
        TIMESTAMP: ${{ github.event.head_commit.timestamp }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const version = process.env.VERSION;
          const commitSha = process.env.COMMIT_SHA;
          const timestamp = process.env.TIMESTAMP;
          
          // 创建Release
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${version}`,
            name: `Release v${version}`,
            body: `## dp_study v${version}\n\n**更新内容：**\n- 自动从main分支构建的最新版本\n- 支持多平台（Windows, Linux, macOS）\n- 支持多编译器（GCC, Clang, MSVC）\n\n**构建信息：**\n- 提交哈希: ${commitSha}\n- 构建时间: ${timestamp}`,
            draft: false,
            prerelease: false
          });
          
          // 输出upload_url供后续步骤使用
          core.setOutput('upload_url', release.data.upload_url);
    
    # 上传所有构建产物到Release
    - name: Upload Release Assets
      uses: shogo82148/actions-upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release_assets/*
        asset_name: '*'
        asset_content_type: application/octet-stream
